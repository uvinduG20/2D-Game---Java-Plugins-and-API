/* Generated By:JavaCC: Do not edit this line. GameConfigParser.java */
package edu.curtin.saed.assignment1;

import java.util.ArrayList;
import java.util.List;

public class GameConfigParser implements GameConfigParserConstants {
    public int rows, cols;
    public int startRow, startCol;
    public int goalRow, goalCol;
    public List<Item> items = new ArrayList<Item>();
    public List<Obstacle> obstacles = new ArrayList<Obstacle>();
    public List<String> plugins = new ArrayList<String>();
    public List<String> scripts = new ArrayList<String>();

    public void parseInputFile() throws ParseException {
        parse(this);
    }

    public void setGridSize(int rows, int cols) {
        this.rows = rows;
        this.cols = cols;
        System.out.println("Grid size: " + rows + "x" + cols);
    }

    public void setStartPosition(int startRow, int startCol) {
        this.startRow = startRow;
        this.startCol = startCol;
        System.out.println("Start position: (" + startRow + "," + startCol + ")");
    }

    public void setGoalPosition(int goalRow, int goalCol) {
        this.goalRow = goalRow;
        this.goalCol = goalCol;
        System.out.println("Goal position: (" + goalRow + "," + goalCol + ")");
    }

    public void addItem(String name, List<Location> locations, String message) {
        items.add(new Item(name, locations, message));
        System.out.println("Parsed item: " + name + " at locations: " + locations);
    }

    public void addObstacle(List<Location> locations, List<String> requiredItems) {
        obstacles.add(new Obstacle(locations, requiredItems));
        System.out.println("Parsed obstacle with requirements: " + requiredItems);
    }

    public void addPlugin(String pluginName) {
        plugins.add(pluginName);
        System.out.println("Parsed plugin: " + pluginName);
    }

    public void addScript(String scriptContent) {
        scripts.add(scriptContent);
        System.out.println("Parsed script content.");
    }

    // Helper method to strip quotes
    public String stripQuotes(String s) {
        return s.substring(1, s.length() - 1);
    }

    // Method to switch lexical states
    public void SwitchTo(int lexState) {
        token_source.SwitchTo(lexState);
    }

// Main Parsing Rule with strict order for each component
  static final public void parse(GameConfigParser parserInstance) throws ParseException {
    sizeDeclaration(parserInstance);
    startDeclaration(parserInstance);
    goalDeclaration(parserInstance);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ITEM:
      case OBSTACLE:
      case PLUGIN:
      case SCRIPT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ITEM:
        itemDeclaration(parserInstance);
        break;
      case OBSTACLE:
        obstacleDeclaration(parserInstance);
        break;
      case PLUGIN:
        pluginDeclaration(parserInstance);
        break;
      case SCRIPT:
        scriptDeclaration(parserInstance);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// Parsing for grid size
  static final public void sizeDeclaration(GameConfigParser parserInstance) throws ParseException {
    Token rowToken, colToken;
    jj_consume_token(SIZE);
    jj_consume_token(LPAREN);
    rowToken = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    colToken = jj_consume_token(NUMBER);
    jj_consume_token(RPAREN);
        parserInstance.setGridSize(Integer.parseInt(rowToken.image), Integer.parseInt(colToken.image));
  }

// Parsing for start position
  static final public void startDeclaration(GameConfigParser parserInstance) throws ParseException {
    Token startRowToken, startColToken;
    jj_consume_token(START);
    jj_consume_token(LPAREN);
    startRowToken = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    startColToken = jj_consume_token(NUMBER);
    jj_consume_token(RPAREN);
        parserInstance.setStartPosition(Integer.parseInt(startRowToken.image), Integer.parseInt(startColToken.image));
  }

// Parsing for goal position
  static final public void goalDeclaration(GameConfigParser parserInstance) throws ParseException {
    Token goalRowToken, goalColToken;
    jj_consume_token(GOAL);
    jj_consume_token(LPAREN);
    goalRowToken = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    goalColToken = jj_consume_token(NUMBER);
    jj_consume_token(RPAREN);
        parserInstance.setGoalPosition(Integer.parseInt(goalRowToken.image), Integer.parseInt(goalColToken.image));
  }

// Parsing for item declaration
  static final public void itemDeclaration(GameConfigParser parserInstance) throws ParseException {
    Token nameToken, messageToken;
    List<Location> locationList;
    jj_consume_token(ITEM);
    nameToken = jj_consume_token(STRING_LITERAL);
    jj_consume_token(LBRACE);
    jj_consume_token(AT);
    locationList = locations();
    jj_consume_token(MESSAGE);
    messageToken = jj_consume_token(STRING_LITERAL);
    jj_consume_token(RBRACE);
        parserInstance.addItem(parserInstance.stripQuotes(nameToken.image), locationList, parserInstance.stripQuotes(messageToken.image));
  }

// Parsing for obstacle declaration
  static final public void obstacleDeclaration(GameConfigParser parserInstance) throws ParseException {
    List<Location> locationList;
    List<String> requiredItemsList;
    jj_consume_token(OBSTACLE);
    jj_consume_token(LBRACE);
    jj_consume_token(AT);
    locationList = locations();
    jj_consume_token(REQUIRES);
    requiredItemsList = requiredItems(parserInstance);
    jj_consume_token(RBRACE);
        parserInstance.addObstacle(locationList, requiredItemsList);
  }

// Parsing for plugin declaration
  static final public void pluginDeclaration(GameConfigParser parserInstance) throws ParseException {
    Token pluginNameToken;
    jj_consume_token(PLUGIN);
    pluginNameToken = jj_consume_token(PLUGIN_NAME);
        parserInstance.addPlugin(pluginNameToken.image);
  }

// Parsing for script declaration
  static final public void scriptDeclaration(GameConfigParser parserInstance) throws ParseException {
    Token scriptContentToken = null;
    jj_consume_token(SCRIPT);
    jj_consume_token(SCRIPT_START);
        parserInstance.SwitchTo(IN_SCRIPT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCRIPT_CONTENT:
      scriptContentToken = jj_consume_token(SCRIPT_CONTENT);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(SCRIPT_END);
                   // Updated to use <SCRIPT_END> instead of <RBRACE>
        parserInstance.SwitchTo(DEFAULT);
        String content = (scriptContentToken != null) ? scriptContentToken.image : "";
        parserInstance.addScript(content);
  }

// Helper Parsing Rules for locations and required items
  static final public List<Location> locations() throws ParseException {
    List<Location> locationList = new ArrayList<Location>();
    Token rowToken, colToken;
    jj_consume_token(LPAREN);
    rowToken = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    colToken = jj_consume_token(NUMBER);
    jj_consume_token(RPAREN);
        locationList.add(new Location(Integer.parseInt(rowToken.image), Integer.parseInt(colToken.image)));
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      jj_consume_token(LPAREN);
      rowToken = jj_consume_token(NUMBER);
      jj_consume_token(COMMA);
      colToken = jj_consume_token(NUMBER);
      jj_consume_token(RPAREN);
        locationList.add(new Location(Integer.parseInt(rowToken.image), Integer.parseInt(colToken.image)));
    }
      {if (true) return locationList;}
    throw new Error("Missing return statement in function");
  }

  static final public List<String> requiredItems(GameConfigParser parserInstance) throws ParseException {
    List<String> requiredItemsList = new ArrayList<String>();
    Token itemToken;
    itemToken = jj_consume_token(STRING_LITERAL);
        requiredItemsList.add(parserInstance.stripQuotes(itemToken.image));
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      itemToken = jj_consume_token(STRING_LITERAL);
        requiredItemsList.add(parserInstance.stripQuotes(itemToken.image));
    }
      {if (true) return requiredItemsList;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GameConfigParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf0,0xf0,0x800000,0x8000,0x8000,};
   }

  /** Constructor with InputStream. */
  public GameConfigParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GameConfigParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GameConfigParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GameConfigParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GameConfigParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GameConfigParser(GameConfigParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GameConfigParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
